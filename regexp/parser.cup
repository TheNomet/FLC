import java_cup.runtime.*;
import java.io.*;
import java.util.*;

init with {:
    sym_table = new Hashtable();
    
:};

parser code {:
	public Hashtable <String, String> sym_table;
    
    public Object stack(int position){
    	return (((Symbol)stack.elementAt(tos+position)).value);
    }
:};

/** Terminal symbols **/

terminal EQ,DOT,S,C,RO,RC,SO,SC,GO,GC,PLUS,MINUS,PIPE,MUL,NL,END;
terminal String ID,INT;


/** Non Terminal symbols **/
non terminal start_sym;
non terminal String ins,instructionl;
non terminal String expl, exp;

/** Precedences **/
//precedence left OR;
//precedence left AND;
//precedence left NOT;
//precedence left MIN, MAJ, MINEQ, MAJEQ, EQEQ, NEQ;
//precedence left PLUS, MINUS;
//precedence left MUL, DIV;
//precedence left UMINUS; //%prec UMINUS

start with start_sym;

/***** Grammar rules *****/


start_sym ::= instructionl:last END NL
{:
	String y = parser.sym_table.get(last);
	System.out.println(last+"="+y);
:}
;

instructionl ::= instructionl ins:x 
{:RESULT = x;:}
| ins:x 
{:RESULT = x;:}
;

ins ::= ID:x EQ expl:y NL
{:
	parser.sym_table.put(x,y);
//	System.out.println(x+"="+y);
	RESULT = x;
:}
;

expl ::= expl:res exp:x 
		{:
			res+=x;	
			RESULT = res;
		:}
		| exp:x
		{:RESULT = x;:}
;
exp ::= INT:x
		{:RESULT = x;:}
		| GO ID:x GC
		{:RESULT = parser.sym_table.get(x);:}
		| SO INT:x MINUS INT:y SC
		{:RESULT = "["+x+"-"+y+"]";:}
		| RO expl:x RC
		{:RESULT = "("+x+")";:}
		| exp:x GO INT:y GC
		{:RESULT = x+"{"+y+"}";:}
		| exp:x GO INT:y C INT:z GC
		{:RESULT = x+"{"+y+","+z+"}";:}
		| exp:x PIPE exp:y 
		{:RESULT = x+"|"+y;:}
;

