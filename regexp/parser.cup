import java_cup.runtime.*;
import java.io.*;
import java.util.*;

init with {:
    sym_table = new Hashtable();
    
:};

parser code {:
	public Hashtable <String, String> sym_table;
    
    public Object stack(int position){
    	return (((Symbol)stack.elementAt(tos+position)).value);
    }
:};

/** Terminal symbols **/

terminal EQ,DOT,S,C,RO,RC,SO,SC,GO,GC,PLUS,MINUS,PIPE,MUL,NL,END;
terminal String ID,INT;
terminal Integer ODD,EVEN,ALL;


/** Non Terminal symbols **/
non terminal start_sym;
non terminal String instructionl;
non terminal String expl, expl1, exp;
non terminal Integer NT0, NT1, NT2,NT3;

/** Precedences **/
//precedence left OR;
//precedence left AND;
//precedence left NOT;
//precedence left MIN, MAJ, MINEQ, MAJEQ, EQEQ, NEQ;
//precedence left PLUS, MINUS;
//precedence left MUL, DIV;
//precedence left UMINUS; //%prec UMINUS

start with start_sym;

/***** Grammar rules *****/


start_sym ::= ODD NL instructionl:last END NL
	{:
		String y = parser.sym_table.get(last);
		System.out.println(last+"="+y);
	:}
| EVEN NL instructionl:last END NL
	{:
		String y = parser.sym_table.get(last);
		System.out.println(last+"="+y);
	:}
| ALL NL instructionl:last END NL
	{:
		String y = parser.sym_table.get(last);
		System.out.println(last+"="+y);
	:}

;

instructionl ::= instructionl ID:x EQ NT0 expl:y NL
{:
	parser.sym_table.put(x,y);
	RESULT = x;
:}
| ID:x EQ NT2 expl:y NL
{:
	parser.sym_table.put(x,y);
	RESULT = x;
:}
;

NT0 ::= 
{:
	RESULT = (Integer) parser.stack(-4);//0 even - 1 odd
	System.out.println(RESULT);
:}
;

expl ::= expl:res NT1 exp:x 
		{:
			res+=x;	
			RESULT = res;
		:}
		| exp:x
		{:RESULT = x;:}
;
NT1 ::= 
{:
	RESULT = (Integer) parser.stack(-1);//0 even - 1 odd
:}
;

exp ::= INT:x
		{:RESULT = x;:}
		| GO ID:x GC
		{:RESULT = parser.sym_table.get(x);:}
		| SO INT:x MINUS INT:y SC
		{:RESULT = "["+x+"-"+y+"]";:}
		| S INT:x MINUS INT:y S
		{:
			Integer odd = (Integer) parser.stack(-5);
			RESULT = "[";
			int i;
			int from = Integer.parseInt(x);
			int to = Integer.parseInt(y);
			if(odd==1){//only odd numbers
				if(from%2==0) from++;
				for( i = from; i < to; i+=2){
					RESULT+=""+i;
				}		
				RESULT +="]";
			}
			else if(odd==0){//only even numbers
				if(from%2==1) from++;
				for( i = from; i < to; i+=2){
					RESULT+=""+i;
				}		
				RESULT +="]";				
			}
			else{ //all numbers
				RESULT += ""+x+"-"+y+"]";
			}

		:}
		| RO NT1 expl:x RC
		{:RESULT = "("+x+")";:}
		| exp:x GO INT:y GC
		{:RESULT = x+"{"+y+"}";:}
		| exp:x GO INT:y C INT:z GC
		{:RESULT = x+"{"+y+","+z+"}";:}
		| exp:x PIPE exp:y 
		{:RESULT = x+"|"+y;:}
;


NT2 ::= 
{:
	RESULT = (Integer) parser.stack(-3);//0 even - 1 odd
:}
;

